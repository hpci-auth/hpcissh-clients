#!/bin/bash

set -eu -o pipefail

VERSION="1.9 (2024-02-22)"

AUTH_TIMES="-o NumberOfPasswordPrompts=1"
AUTH_METHOD="-o PreferredAuthentications=keyboard-interactive"
FORWARD_BEHAVIOR="-o ExitOnForwardFailure=yes"
SSH_BASIC_OPTS="${AUTH_METHOD} ${AUTH_TIMES}"
SSH_OPTS="${SSH_BASIC_OPTS} ${FORWARD_BEHAVIOR}"

OAUTH_SSH_AT_PROMPT="Enter your OAuth token:"

HPCISSH_CONF=${HOME}/.hpcissh
HPCISSH_LOCAL_ACCOUNTS=${HPCISSH_CONF}.local_accounts

# TEST CASE:
# - setup:
#   - HPCISSH_DEBUG=yes
# - touch -t $(date -d "-43100 seconds" +%Y%m%d%H%M.%S) .hpcissh.local_accounts
#   - DEBUG: USE cached userinfo
# - touch -t $(date -d "-43300 seconds" +%Y%m%d%H%M.%S) .hpcissh.local_accounts
#   - DEBUG: DOWNLOAD userinfo

DEBUG() {
    if [ "${HPCISSH_DEBUG:-no}" = yes ]; then
	echo >&2 "DEBUG:" "$@"
    fi
}

INFO() {
    echo >&2 "INFO:" "$@"
}

WARN() {
    echo >&2 "WARNING:" "$@"
}

ERROR() {
    echo >&2 "ERROR:" "$@"
}

_get_token() {
    local CHECK_EXPIRED="$1"

    OIDC_AT="${OIDC_AT:-}"
    if [ -n "$OIDC_AT" ]; then
	DEBUG "OIDC_AT: use OIDC_AT (access token) environemnt variable"
	return 0
    fi

    # SEE ALSO:
    # http://oss-tsukuba.org/gfarm/share/doc/gfarm/html/en/user/auth-sasl.html
    # ex. /tmp/jwt_user_u1000/token.jwt
    DEBUG "USE_JWT_AGENT=$USE_JWT_AGENT"
    local expired=0
    if [ "$USE_JWT_AGENT" = yes ]; then  # use jwt-agent
	local token_file="${JWT_USER_PATH:-}"

	if [ -n "$token_file" -a -r "$token_file" ]; then
	    DEBUG "OIDC_AT: use JWT_USER_PATH ($token_file)"
	    OIDC_AT=$(cat "$token_file")
	fi
	if [ -z "$OIDC_AT" ]; then
	    local uid
	    uid=$(id -u)
	    token_file="/tmp/jwt_user_u${uid}/token.jwt"
	    if [ -r "$token_file" ]; then
		DEBUG "OIDC_AT: use $token_file"
		OIDC_AT=$(cat "$token_file")
	    fi
	fi
    fi
    if [ -z "$OIDC_AT" -a -n "${OIDC_SOCK:-}" ]; then  # use oidc-agent
	if OIDC_AT=$(oidc-token -t ${OIDC_AT_LEAST_VALID_TIME} ${OIDC_AGENT_CONF_NAME}); then
	    DEBUG "OIDC_AT: use oidc-token command"
	else
	    ERROR "'oidc-token ${OIDC_AGENT_CONF_NAME}' failed"
	    return 1  # error
	fi
    fi
    if [ -z "$OIDC_AT" ]; then
	ERROR "Access token cannot be found. jwt-agent or oidc-agent is required."
	return 1  # error
    fi
    if $CHECK_EXPIRED && is_jwt_expired; then
	ERROR "Expired access token is found."
	return 1  # error
    fi
}

get_token() {
    _get_token true
}

get_token_ignore_expired() {
    _get_token false
}

init_sshpass() {
    if [ -z "${SSHPASS:-}" ]; then
	export SSHPASS=${OIDC_AT}
    fi
    DEBUG "init_sshpass"
}

init_SSH_ASKPASS() {
    export OIDC_AT  # to get environment variable in hpci-token
    export SSH_ASKPASS=hpci-token
    export SSH_ASKPASS_REQUIRE=force
    export DISPLAY=${DISPLAY-DUMMY:0}
    DEBUG "init_SSH_ASKPASS"
}

runssh() {
    if [ "$HPCISSH_TOKEN_INPUT" = "SSH_ASKPASS" ]; then
	init_SSH_ASKPASS
	setsid -w "$@"
    else
	init_sshpass
	sshpass -e -P "$OAUTH_SSH_AT_PROMPT" "$@"
    fi
}

check_perm() {
    local CONF="$1"

    # owner?
    [ -O "$CONF" ] || return 1

    # is writable by others?
    local writable
    writable=$(( 8#$(stat -c %a "$CONF") & ~8#0755 ))
    [ "$writable" = "0" ] || return 1
}

load_common_config() {
    # Load user configuration
    if [ -f $HPCISSH_CONF ];
    then
	if ! check_perm $HPCISSH_CONF; then
            ERROR "${HPCISSH_CONF} is writable by others.  Run 'chmod 600 ${HPCISSH_CONF}'."
            exit 1
	fi
	# overridable by environment variables
	local keyval
	local key
	local val
        for keyval in $(cat $HPCISSH_CONF); do
	    [[ "$keyval" =~ "=" ]] || continue
	    echo "$keyval" | grep -q "^\s*#.*$" && continue
	    key=${keyval%=*}
	    val=${keyval#*=}
	    # skip semicolon
	    [[ "$key" =~ [\;] ]] && continue
	    [[ "$val" =~ [\;] ]] && continue
	    if eval "test -z \"\${${key}:-}\""; then
		eval "${key}=${val}"
		eval "DEBUG \"${key}=${val} ($HPCISSH_CONF)\""
	    else
		eval "DEBUG \"${key}=\$${key} (environment variable)\""
	    fi
	done
    fi

    HPCISSH_DEBUG_X=${HPCISSH_DEBUG_X:-no}
    if [ "$HPCISSH_DEBUG_X" = yes ]; then
        set -x
    fi

    # set defaults
    OIDC_AT_LEAST_VALID_TIME=${OIDC_AT_LEAST_VALID_TIME:-180}  # 3 min.
    OIDC_AGENT_FORWARD=${OIDC_AGENT_FORWARD:-yes}
    OIDC_AGENT_CONF_NAME=${OIDC_AGENT_CONF_NAME:-hpci}

    OIDC_ISSUER=${OIDC_ISSUER:-https://metis.hpci.nii.ac.jp/auth/realms/HPCI}
    OIDC_USERINFO_ENDPOINT=${OIDC_USERINFO_ENDPOINT:-https://metis.hpci.nii.ac.jp/auth/realms/HPCI/protocol/openid-connect/userinfo}
    OIDC_USERINFO_EXPIRE=${OIDC_USERINFO_EXPIRE:-1800}  # sec. = 30 min.

    HPCISSH_DEBUG=${HPCISSH_DEBUG:-no}
    HPCISSH_PORT=${HPCISSH_PORT:-2222}

    HPCISSH_TOKEN_INPUT=${HPCISSH_TOKEN_INPUT:-sshpass}  # or SSH_ASKPASS

    USE_JWT_AGENT=${USE_JWT_AGENT:-yes}

    DEBUG "OIDC_SOCK=${OIDC_SOCK:-}"
}

init_common() {
    if [ ${#} -eq 0 ];
    then
        usage
        exit 1
    fi

    set +e
    echo "${@}" | grep PreferredAuthentications > /dev/null
    local RESULT=${?}
    set -e
    if [ ${RESULT} -eq 0 ];
    then
        ERROR "don't use PreferredAuthentications option."
        exit 1
    fi

    load_common_config
}

print_userinfo() {
    curl -s -H GET "$OIDC_USERINFO_ENDPOINT" \
	 -H 'Content-Type:application/json;charset=utf-8' \
	 -H "Authorization: Bearer $OIDC_AT"
}

get_local_accounts_json() {
    local USE_CACHE="$1"
    local token

    if $USE_CACHE; then
	if [ -f "$HPCISSH_LOCAL_ACCOUNTS" ]; then
	    if jq -e '.["local-accounts"]' "$HPCISSH_LOCAL_ACCOUNTS"; then
		# valid
		cat "$HPCISSH_LOCAL_ACCOUNTS"
		DEBUG "USE cached userinfo"
		return
	    else
		# invalid file
		rm -f "$HPCISSH_LOCAL_ACCOUNTS"
		DEBUG "DELETE invalid cached userinfo"
		echo ""  # return
		return
	    fi
	else
	    DEBUG "NO cached userinfo"
	    echo ""  # return
	    return
	fi
    fi
    local tmpfile
    tmpfile="${HPCISSH_LOCAL_ACCOUNTS}.tmp"
    touch $tmpfile
    chmod 600 $tmpfile
    DEBUG "DOWNLOAD userinfo"
    if print_userinfo > $tmpfile; then
	mv $tmpfile "$HPCISSH_LOCAL_ACCOUNTS"
	cat "$HPCISSH_LOCAL_ACCOUNTS"
	return
    else
	rm -f $tmpfile
	exit $?
    fi
}

conv_key() {
    # use sha256
    sha256sum | cut -d ' ' -f 1
}

KEY_PREFIX="Z"  # avoid "value too great for base"

load_local_accounts() {
    local USE_CACHE="$1"
    local ACCMAP_LIST=()

    set +eu
    mapfile -t ACCMAP_LIST < <(get_local_accounts_json $USE_CACHE \
        | jq -r '.["local-accounts"] | to_entries | .[] | .key + " " + .value' 2> /dev/null)
    # ex. ACCMAP_LIST[0]="oauth-server1.test test02"

    # If "set -e" is not used, "ACCMAP_LIST[@]: unbound variable" will occur.
    local CHECK_LIST="${ACCMAP_LIST[@]}"
    set -eu
    if [ -z "$CHECK_LIST" ]; then
	DEBUG "NO local-accounts"
	return 0
    fi

    unset ACCMAP
    declare -g -A ACCMAP  # global
    local key
    local value
    local FQDN
    for i in "${ACCMAP_LIST[@]}"; do
	# conv_key: keys for associative array variable of bash
	FQDN=`echo $i | cut -d ' ' -f 1`
	key="$KEY_PREFIX"`echo $FQDN | conv_key`
	value=`echo $i | cut -d ' ' -f 2`
	ACCMAP[${key}]="$value"
	DEBUG "ACCMAP[$FQDN($key)]=${ACCMAP[$key]}"
    done
    for i in "${!ACCMAP[@]}"; do
	DEBUG "ACCMAP[$i]=${ACCMAP[$i]}"
    done
}

get_local_account() {
    local FQDN="$1"
    local key
    local localacc
    local USE_CACHE

    DEBUG "FQDN=$FQDN"
    key=`echo $FQDN | conv_key`
    key="${KEY_PREFIX}${key}"
    DEBUG "FQDN(sha256)=$key"

    if [ -f "$HPCISSH_LOCAL_ACCOUNTS" ]; then
	local EXPIRE=${OIDC_USERINFO_EXPIRE}
	local current_time
	local mtime
	local onedayago
	current_time=$(date +%s)
	mtime=$(stat -c %Y "$HPCISSH_LOCAL_ACCOUNTS")  # modification time
	expired=$((mtime + EXPIRE))
	DEBUG current_time=$current_time
	DEBUG mtime=$mtime
	DEBUG expired=$expired
	if [ "$current_time" -le "$expired" ]; then
	    DEBUG "SKIP downloading userinfo (use cache)"

	    USE_CACHE=true
	    load_local_accounts $USE_CACHE
	    set +u
	    localacc=${ACCMAP[$key]}
	    set -u
	    if [ -n "$localacc" ]; then
		# found
		echo "$localacc"
		return
	    else
		# not found
		echo ""
		return
	    fi
	fi
	# expired
    fi
    # update JSON file once
    # download userinfo
    USE_CACHE=false
    load_local_accounts $USE_CACHE
    set +u
    echo ${ACCMAP[$key]}
    set -u
}

load_conf() {
    if [ ${#} -ne 4 ];
    then
        ERROR "load_conf: invalid usage"
        return 1
    fi

    local ISSUER=${1}
    local SCOPES=${2}
    local AUDIENCE=${3}
    local CONF_NAME=${4}

    set +e
    oidc-add -l | grep -E "^${CONF_NAME}$" > /dev/null
    local RESULT=${?}
    set -e
    if [ ${RESULT} -eq 0 ];
    then
	set +e
	oidc-add -a | grep -E "^${CONF_NAME}$" > /dev/null
	RESULT=${?}
	set -e
	if [ ${RESULT} -ne 0 ];
	then
	    oidc-add ${CONF_NAME}
	else
	    # The account configuration is already loaded
	    get_token_ignore_expired
	    if is_jwt_expired; then
		ERROR "Expired access token is found."
		return 1  # error
	    fi
	fi
    else
	oidc-gen --pub \
	    -w device \
	    --issuer=${ISSUER} \
	    --scope="${SCOPES}" \
	    --redirect-uri=http://localhost:8080/ \
	    --aud=${AUDIENCE} \
	    ${CONF_NAME}
    fi
}

access_token_exists() {
    if [ -z "${OIDC_AT:-}" ];
    then
        ERROR "oidc-agent (and OIDC_SOCK environment) is required"
        exit 1
    fi
}

warning_not_found_localacc() {
    local username=${USER:-}

    if [ -z "$username" ]; then
	username=`whoami`
    fi
    WARN "Failed to find your remote username corresponding to the specified OAuth-SSH server.  Your local username (${username}) will be specified instead."
}

print_version() {
    echo "hpcissh (OAuth-SSH client for HPCI) ${VERSION}"
    ssh -V
}

print_args() {
    local ARGV=("$@")
    local arg
    for arg in "${ARGV[@]}"; do
	echo "$arg"
    done
}

convert_ssh_arg() {
    local ARGV=("$@")
    local argnum=${#ARGV[*]}
    local maxidx=$(($argnum - 1))
    local ARG
    local NEXTARG
    local found=false
    for i in `seq 1 $maxidx`; do
	ARG=${ARGV[${i}]}
	case "$ARG" in
	    -*)  # is option
		continue
		;;
	esac
	# ARG is not a option

	# if [ $i -eq $maxidx ]; then
	#     NEXTARG=
	# else
	#     NEXTARG=${ARGV[$(($i + 1))]}
	# fi
	# case "$NEXTARG" in
	#     -*)
	# 	# CASE: ssh -l USER -v host
	# 	# not supported (ssh allows): ssh host -l user command
	# 	continue
	# esac

	# Convert the first matching host.
	localacc=`get_local_account "$ARG"`
	if [ -n "$localacc" ]; then
	    found=true
	    # CASE: ssh -l name name

	    # ARG is hostname
	    local USERHOST="${localacc}@${ARG}"
	    ARGV[${i}]=${USERHOST}  # update
	    break
	fi
    done
    if ! $found; then
        #warning_not_found_localacc
        DEBUG "unknown hpcissh server"
    fi
    print_args "${ARGV[@]}"
}

split_user_host_file() {
    local input="$1"
    local command="$2"  # scp or sftp
    local user=
    local host=
    local file=

    if [[ $input == *:* ]]; then
	# user@host:file
	host=$(echo "$input" | cut -d':' -f1)
	file=$(echo "$input" | cut -d':' -f2-)
	if [[ $host == *@* ]]; then
	    user=$(echo "$host" | cut -d'@' -f1)
	    host=$(echo "$host" | cut -d'@' -f2-)
	fi
    else
	if [ $command = "scp" ]; then
	    user=
	    host=
	    file=$input
	elif [ $command = "sftp" ]; then
	    user=
	    host=$input
	    file=
	    if [[ $host == *@* ]]; then
		user=$(echo "$host" | cut -d'@' -f1)
		host=$(echo "$host" | cut -d'@' -f2-)
	    fi
	fi
    fi
    if [ "$HPCISSH_DEBUG" = yes ]; then
	DEBUG "--- $input ---"
	DEBUG "SSH_USER=\"$user\""
	DEBUG "SSH_HOST=\"$host\""
	DEBUG "SSH_FILE=\"$file\""
    fi
    echo "SSH_USER=\"$user\""
    echo "SSH_HOST=\"$host\""
    echo "SSH_FILE=\"$file\""
}

convert_scp_arg() {
    # scp [options] file [user1@]host1:[file]
    # scp [options] [[user1@]host1:]file file
    # scp [options] [[user1@]host1:]file [[user2@]host2]:[file]
    # scp [options] [[user1@]host1:]file ... dir

    local ARGV=("$@")
    local argnum=${#ARGV[*]}
    if [ $argnum -lt 3 ]; then
	echo "INVALID SYNTAX"
	return 1
    fi

    local maxidx=$(($argnum - 1))
    local SSH_USER=
    local SSH_HOST=
    local SSH_FILE=
    local found=false

    # convert from last arg
    for i in `seq $maxidx -1 1`; do
	ARG=${ARGV[$i]}
	case "$ARG" in
	    -*)
		break
		;;
	esac
	# ARG is not a option

	if [[ "$ARG" == *:* ]]; then
	    eval `split_user_host_file "$ARG" scp`
	    if [ -n "$SSH_HOST" ]; then
		if [ -z "$SSH_USER" ]; then
		    SSH_USER=`get_local_account "$SSH_HOST"`
		    if [ -n "$SSH_USER" ]; then
			found=true
			# update
			ARGV[$i]="${SSH_USER}@${ARG}"
		    fi
		fi
	    fi
	fi
    done
    if ! $found; then
        #warning_not_found_localacc
        DEBUG "unknown hpcissh server"
    fi
    print_args "${ARGV[@]}"
}

convert_sftp_arg() {
    # sftp [options] [user1@]host1[:file]

    local ARGV=("$@")
    local argnum=${#ARGV[*]}
    if [ $argnum -lt 2 ]; then
	echo "INVALID SYNTAX"
	return 1
    fi

    local targetidx=$(($argnum - 1))
    local DST=${ARGV[$targetidx]}
    local SSH_USER=
    local SSH_HOST=
    local SSH_FILE=

    if [[ ! "$DST" = *:* ]]; then
	if [[ $argnum -ge 3 ]]; then
	    local DST2=${ARGV[$((targetidx - 1))]}
	    if [[ ! "$DST2" =~ ^- ]]; then  # not option
		if [[ "$DST2" = *:* ]]; then
		    # CASE: sftp host:file copied_file
		    DST="$DST2"
		    targetidx=$((targetidx - 1))
		fi
	    fi
	fi
    fi

    local found=false
    SSH_USER=
    SSH_HOST=
    SSH_FILE=
    eval `split_user_host_file "$DST" sftp`
    if [ -n "$SSH_HOST" ]; then
	if [ -z "$SSH_USER" ]; then
	    SSH_USER=`get_local_account "$SSH_HOST"`
	    if [ -n "$SSH_USER" ]; then
		found=true
		# update
		ARGV[$targetidx]="${SSH_USER}@${DST}"
	    fi
	fi
    fi
    if ! $found; then
        #warning_not_found_localacc
        DEBUG "unknown hpcissh server"
    fi
    print_args "${ARGV[@]}"
}

verify_hostname() {
    local RESULT=$1

    if [ ${RESULT} -eq 6 ]; then
	ERROR "Host verification may have failed. Please check /etc/ssh/ssh_known_hosts or ~/.ssh/known_hosts"
    fi
}

pad_base64() {
    local data=$1===
    local count
    count=$(echo -n $data | wc -c)
    count=$((count / 4 * 4))
    echo $data | cut -b -$count
}

decode_jwt() {
    for i in 1 2; do
	b64=$(echo $OIDC_AT | cut -d. -f $i)
	pad_base64 $b64 | base64 -d
    done
}

check_expired() {
    local report="$1"
    local is_expired=0
    local current
    current=$(date +%s)
    local key
    local val
    local sec
    local remain=0
    while read key val; do
	case $key in
	    \"exp\":)
		sec=$(echo $val | cut -d, -f 1)
		[ $is_expired = 0 ] && is_expired=$((sec < current))
		remain=$((sec - current))
		;;
	    \"iat\":|\"auth_time\":|\"nbf\":)
		sec=$(echo $val | cut -d, -f 1)
		[ $is_expired = 0 ] && is_expired=$((sec > current))
		;;
	esac
    done
    if $report; then
	# 1 is True
	[ $is_expired -eq 1 ] && ERROR "Access token is expired."
	[ $remain -gt 0 ] && INFO "remaining time: ${remain} sec."
    fi
    if [ $is_expired -eq 1 ]; then
	return 1  # failure
    else
	return 0  # success
    fi
}

is_jwt_expired() {
    decoded=`decode_jwt`
    if echo "$decoded" | jq | check_expired false; then
	return 1
    else
	return 0  # True ... expired
    fi
}

report_expired() {
    decoded=`decode_jwt`
    echo "$decoded" | jq
    echo "$decoded" | jq | check_expired true
}
